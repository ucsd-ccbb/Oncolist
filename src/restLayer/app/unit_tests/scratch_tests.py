__author__ = 'aarongary'
from app import genemania

import unittest
import warnings
from bson.json_util import dumps
import json
import pymongo
from itertools import islice
import requests
from app import go
from app import SearchViz
from app import ElasticSearch
from graphviz import Graph
import pydot
import networkx as nx
import numpy as np
import pandas as pd
from app import SearchConditionsTab
from app import SearchPathwaysTab
from models.TermResolver import TermAnalyzer

class ScratchTests(unittest.TestCase):
    #==============================
    # CLUSTER SEARCH TEST
    #==============================
    def test_genemania_scratch(self):
        test_conditions_tab = False;
        test_cx_conversion = False;
        test_image_export = False;
        test_graph_neato = False;
        #go.get_genes_from_Ontology('GO:0005509')

        #go.get_GO_genes_Roman_dataset()

        if(test_graph_neato):
            dot = Graph(comment='testing', engine='neato')
            dot.graph_attr['outputorder'] = 'edgesfirst'
            dot.edge_attr['splines'] = 'true'
            with open('/Users/aarongary/Development/Projects/GenelistSearch/Prod/nodes_and_edges.json') as data_file:
                data = json.load(data_file)

                for k in data['nodes']:
                    my_shape = 'circle'
                    my_color = 'gray'
                    my_border_color = 'gray'
                    my_size = str(data['nodes'][k]['size']/18) if data['nodes'][k]['size'] > 4 else '0.22' #'0.4'

                    rgba_string = data['nodes'][k]['color']['background'].replace('rgba(','').replace(')','').split(',')

                    r_part =  0 if rgba_string[0] == '0' else int(rgba_string[0])-1
                    g_part =  0 if rgba_string[1] == '0' else int(rgba_string[1])-1
                    b_part =  0 if rgba_string[2] == '0' else int(rgba_string[2])-1

                    my_color = '#%02x%02x%02x' % (r_part, g_part, b_part)
                    my_border_color = my_color

                    #print data['nodes'][k]['size']

                    if(data['nodes'][k]['shape'] == 'triangle'):
                        #print data['nodes'][k]['shape']
                        my_shape = 'triangle'
                        my_color = '#F5BC30'
                        my_border_color = '#F5BC30'
                        my_size = '1.1'
                    else:
                        if(data['nodes'][k]['borderWidth'] != 0):
                            my_border_color = '#000000'

                    pos_str = str(data['nodes'][k]['x']/50) + ',' + str(data['nodes'][k]['y']/50) + '!'
                    pos_str_shadow = str((data['nodes'][k]['x'] + 3)/50) + ',' + str((data['nodes'][k]['y'] + 3)/50) + '!'

                    dot.node(str(data['nodes'][k]['id']) + 'SHD', '', fixedsize='true', labelloc='b', width=my_size, height=my_size, shape=my_shape, style='bold,filled', fillcolor='#666666', color='#666666', pos=pos_str_shadow)
                    dot.node(str(data['nodes'][k]['id']), data['nodes'][k]['label'], fixedsize='true', labelloc='b', width=my_size, height=my_size, shape=my_shape, style='bold,filled', fillcolor=my_color, color=my_border_color, pos=pos_str)
                    #print data['nodes'][k]['label']

                for k in data['edges']:
                    dot.edge(str(data['edges'][k]['from']), str(data['edges'][k]['to']), color="#0C0C0C33")

            graph = pydot.graph_from_dot_file('somefile.dot')
            graph.write_png('somefile.png')

            dot.render('test-output/nodes_and_edges.gv', view=True)
            myStr = ''
        elif(test_image_export):
            zvalues = [[0.56010000000000004], [0.53180000000000005], [0.70720000000000005], [0.50849999999999995], [0.55649999999999999], [0.51939999999999997], [0.67520000000000002], [0.55900000000000005], [0.53029999999999999], [0.58989999999999998], [0.5091], [0.53879999999999995], [0.51449999999999996], [0.62839999999999996], [0.51690000000000003], [0.52669999999999995], [0.53590000000000004], [0.51719999999999999], [0.54830000000000001], [0.58609999999999995], [0.54690000000000005], [0.58489999999999998], [0.52990000000000004], [0.63090000000000002], [0.65500000000000003], [0.56859999999999999], [0.63700000000000001], [0.50770000000000004], [0.53749999999999998], [0.51329999999999998], [0.60850000000000004], [0.55710000000000004], [0.52639999999999998], [0.57330000000000003], [0.58250000000000002], [0.6613], [0.60370000000000001], [0.58350000000000002], [0.5232], [0.52459999999999996], [0.63970000000000005], [0.69689999999999996], [0.54590000000000005], [0.59130000000000005], [0.57220000000000004], [0.69120000000000004], [0.5806], [0.62860000000000005], [0.50280000000000002], [0.51600000000000001], [0.52200000000000002], [0.58379999999999999], [0.65390000000000004], [0.55420000000000003], [0.503], [0.52339999999999998], [0.61339999999999995], [0.59079999999999999], [0.66990000000000005], [0.70440000000000003], [0.50419999999999998], [0.52359999999999995], [0.66559999999999997], [0.6522], [0.51719999999999999], [0.57420000000000004], [0.52510000000000001], [0.50519999999999998], [0.56200000000000006], [0.56259999999999999], [0.5857], [0.53500000000000003], [0.56840000000000002], [0.60329999999999995], [0.54900000000000004], [0.56330000000000002], [0.55679999999999996], [0.51680000000000004], [0.61360000000000003], [0.56169999999999998], [0.55530000000000002], [0.5161], [0.61450000000000005], [0.58099999999999996], [0.57310000000000005], [0.50060000000000004], [0.56969999999999998], [0.61839999999999995], [0.50209999999999999], [0.51680000000000004], [0.52129999999999999], [0.66069999999999995], [0.58079999999999998], [0.51180000000000003], [0.5474], [0.50539999999999996], [0.53939999999999999], [0.51759999999999995], [0.56659999999999999], [0.53220000000000001], [0.54490000000000005], [0.55669999999999997], [0.50560000000000005], [0.55389999999999995], [0.5978], [0.60809999999999997], [0.57769999999999999], [0.65869999999999995], [0.54610000000000003], [0.55179999999999996], [0.5514], [0.62580000000000002], [0.60609999999999997], [0.52900000000000003], [0.53569999999999995], [0.54149999999999998], [0.6159], [0.57069999999999999], [0.58530000000000004], [0.66749999999999998], [0.51170000000000004], [0.5222], [0.58189999999999997], [0.62549999999999994], [0.60070000000000001], [0.51919999999999999], [0.53069999999999995], [0.51049999999999995], [0.60670000000000002], [0.58609999999999995], [0.58230000000000004], [0.65039999999999998], [0.51280000000000003], [0.51349999999999996], [0.51380000000000003], [0.55300000000000005], [0.55989999999999995], [0.54120000000000001], [0.60260000000000002], [0.71750000000000003], [0.5202], [0.62090000000000001], [0.54369999999999996], [0.55259999999999998], [0.54369999999999996], [0.54859999999999998], [0.60199999999999998], [0.68659999999999999], [0.51780000000000004], [0.58550000000000002], [0.53490000000000004], [0.63319999999999999], [0.53339999999999999], [0.60560000000000003], [0.51649999999999996], [0.66110000000000002], [0.51819999999999999], [0.65739999999999998], [0.60960000000000003], [0.59379999999999999], [0.52070000000000005], [0.5917], [0.56389999999999996], [0.54069999999999996], [0.6361], [0.62460000000000004], [0.56620000000000004], [0.61829999999999996], [0.64939999999999998], [0.66200000000000003], [0.53490000000000004], [0.52880000000000005], [0.57350000000000001], [0.62739999999999996], [0.56799999999999995], [0.50519999999999998], [0.73650000000000004], [0.51329999999999998], [0.54979999999999996], [0.64870000000000005], [0.52029999999999998], [0.51459999999999995], [0.58750000000000002], [0.58530000000000004], [0.54320000000000002], [0.51539999999999997], [0.5726], [0.51649999999999996], [0.65469999999999995], [0.65529999999999999], [0.6038], [0.56669999999999998], [0.69910000000000005], [0.58950000000000002], [0.73729999999999996], [0.5222], [0.66139999999999999], [0.6522], [0.53169999999999995], [0.74129999999999996], [0.6169], [0.56510000000000005], [0.65490000000000004], [0.65610000000000002], [0.65029999999999999], [0.52349999999999997], [0.69379999999999997], [0.54879999999999995], [0.51700000000000002], [0.53159999999999996], [0.57579999999999998], [0.50819999999999999], [0.503], [0.6321], [0.51180000000000003], [0.57569999999999999], [0.63790000000000002], [0.66339999999999999], [0.60250000000000004], [0.7218], [0.68479999999999996], [0.54079999999999995], [0.67689999999999995], [0.7077], [0.50049999999999994], [0.51190000000000002], [0.58640000000000003], [0.52359999999999995], [0.68500000000000005], [0.64749999999999996], [0.51100000000000001], [0.60229999999999995], [0.55430000000000001], [0.57650000000000001], [0.53059999999999996], [0.51870000000000005], [0.61319999999999997], [0.57289999999999996], [0.72750000000000004], [0.55969999999999998], [0.61550000000000005], [0.55940000000000001], [0.59809999999999997], [0.54010000000000002], [0.59509999999999996], [0.52729999999999999], [0.53890000000000005], [0.68459999999999999], [0.54669999999999996], [0.5252], [0.53010000000000002], [0.60419999999999996], [0.60319999999999996], [0.70220000000000005], [0.50090000000000001], [0.54449999999999998], [0.52739999999999998], [0.52270000000000005], [0.54500000000000004], [0.57320000000000004], [0.58879999999999999], [0.52739999999999998], [0.60460000000000003], [0.61140000000000005], [0.55010000000000003], [0.50619999999999998], [0.57669999999999999], [0.59609999999999996], [0.53890000000000005], [0.53410000000000002], [0.51559999999999995], [0.54869999999999997], [0.57489999999999997], [0.51800000000000002], [0.51959999999999995], [0.50900000000000001], [0.61580000000000001], [0.55349999999999999], [0.56530000000000002], [0.55389999999999995], [0.64790000000000003], [0.58209999999999995], [0.71640000000000004], [0.50029999999999997], [0.68669999999999998], [0.57820000000000005], [0.53080000000000005], [0.65690000000000004], [0.54830000000000001], [0.51680000000000004], [0.64600000000000002], [0.5111], [0.58199999999999996], [0.72070000000000001], [0.55810000000000004], [0.58079999999999998], [0.66649999999999998], [0.51419999999999999], [0.62390000000000001], [0.58709999999999996], [0.71740000000000004], [0.53600000000000003], [0.52729999999999999], [0.59560000000000002], [0.55030000000000001], [0.53739999999999999], [0.57140000000000002], [0.56140000000000001], [0.621], [0.61470000000000002], [0.74970000000000003], [0.53420000000000001], [0.70630000000000004], [0.55289999999999995], [0.58220000000000005], [0.54100000000000004], [0.51149999999999995], [0.55600000000000005], [0.71220000000000006], [0.55420000000000003], [0.6038], [0.5121], [0.57540000000000002], [0.5373], [0.50360000000000005], [0.58009999999999995], [0.59689999999999999], [0.66369999999999996], [0.55249999999999999], [0.5726], [0.66579999999999995], [0.5464], [0.67830000000000001], [0.67720000000000002], [0.57099999999999995], [0.56089999999999995], [0.50890000000000002], [0.50649999999999995], [0.51529999999999998], [0.71970000000000001], [0.51280000000000003], [0.56169999999999998], [0.54290000000000005], [0.57650000000000001], [0.59730000000000005], [0.55149999999999999], [0.68320000000000003], [0.5423], [0.53539999999999999], [0.59830000000000005], [0.63839999999999997], [0.63490000000000002], [0.59299999999999997], [0.50949999999999995], [0.52990000000000004], [0.53439999999999999], [0.52000000000000002], [0.52969999999999995], [0.50180000000000002], [0.63580000000000003], [0.57289999999999996], [0.56730000000000003], [0.62109999999999999], [0.52839999999999998], [0.55659999999999998], [0.51300000000000001], [0.65010000000000001], [0.57989999999999997], [0.54890000000000005], [0.53539999999999999], [0.68000000000000005], [0.53779999999999994], [0.67310000000000003], [0.58479999999999999], [0.56069999999999998], [0.52610000000000001], [0.627], [0.51780000000000004], [0.63670000000000004], [0.53449999999999998], [0.51000000000000001], [0.54379999999999995], [0.58230000000000004], [0.52349999999999997], [0.62539999999999996], [0.55979999999999996], [0.50149999999999995], [0.50670000000000004], [0.59650000000000003], [0.58440000000000003], [0.71150000000000002], [0.58650000000000002], [0.50849999999999995], [0.50209999999999999], [0.60940000000000005], [0.5363], [0.52059999999999995], [0.61380000000000001], [0.68730000000000002], [0.57789999999999997], [0.74719999999999998], [0.5161], [0.50370000000000004], [0.67100000000000004], [0.54569999999999996], [0.60709999999999997], [0.58340000000000003], [0.53120000000000001], [0.5575], [0.56100000000000005], [0.51670000000000005], [0.65249999999999997], [0.59670000000000001], [0.69599999999999995], [0.64200000000000002], [0.745], [0.61719999999999997], [0.65600000000000003], [0.59440000000000004], [0.51870000000000005], [0.54679999999999995], [0.71919999999999995], [0.53500000000000003], [0.63070000000000004], [0.58940000000000003], [0.63029999999999997], [0.66820000000000002], [0.59089999999999998], [0.58840000000000003], [0.52370000000000005], [0.5534], [0.72870000000000001], [0.60070000000000001], [0.68320000000000003], [0.50080000000000002], [0.61599999999999999], [0.53120000000000001], [0.63280000000000003], [0.74519999999999997], [0.66600000000000004], [0.51529999999999998], [0.59409999999999996], [0.74429999999999996], [0.64859999999999995], [0.54549999999999998], [0.59670000000000001], [0.6744], [0.53790000000000004], [0.59419999999999995], [0.59870000000000001], [0.57720000000000005], [0.53710000000000002], [0.61119999999999997], [0.61470000000000002], [0.63949999999999996], [0.51019999999999999], [0.51639999999999997], [0.51639999999999997], [0.52510000000000001], [0.57720000000000005], [0.54879999999999995], [0.56579999999999997], [0.60140000000000005], [0.56530000000000002], [0.59330000000000005], [0.54300000000000004], [0.58260000000000001], [0.51739999999999997], [0.70269999999999999], [0.63039999999999996], [0.50539999999999996], [0.62019999999999997], [0.56340000000000001], [0.50309999999999999], [0.50519999999999998], [0.50509999999999999], [0.60589999999999999], [0.50670000000000004], [0.65590000000000004], [0.65949999999999998], [0.55049999999999999], [0.52990000000000004], [0.60670000000000002], [0.50319999999999998], [0.53449999999999998], [0.52300000000000002], [0.64659999999999995], [0.70589999999999997], [0.65759999999999996], [0.57569999999999999], [0.61919999999999997], [0.58520000000000005], [0.58740000000000003], [0.63780000000000003], [0.50080000000000002], [0.51490000000000002], [0.50619999999999998], [0.54879999999999995], [0.67749999999999999], [0.51649999999999996], [0.55500000000000005], [0.56340000000000001], [0.51970000000000005], [0.56899999999999995], [0.64839999999999998], [0.50360000000000005], [0.7359], [0.68540000000000001], [0.57220000000000004], [0.59289999999999998], [0.55400000000000005], [0.62709999999999999], [0.61990000000000001], [0.60199999999999998], [0.53510000000000002], [0.50680000000000003], [0.53069999999999995], [0.60350000000000004], [0.61260000000000003], [0.65790000000000004], [0.61699999999999999], [0.50849999999999995], [0.66139999999999999], [0.59650000000000003], [0.61950000000000005], [0.66320000000000001], [0.53879999999999995], [0.51180000000000003], [0.57840000000000003], [0.5413], [0.52900000000000003], [0.60660000000000003], [0.53569999999999995], [0.53180000000000005], [0.5474], [0.53720000000000001], [0.55649999999999999], [0.70050000000000001], [0.74709999999999999], [0.5988], [0.5796], [0.50839999999999996], [0.69210000000000005], [0.62419999999999998], [0.51170000000000004], [0.74319999999999997], [0.50880000000000003], [0.61350000000000005], [0.52070000000000005], [0.50349999999999995], [0.58830000000000005], [0.56379999999999997], [0.59970000000000001], [0.52290000000000003], [0.7944], [0.62780000000000002], [0.63500000000000001], [0.57420000000000004], [0.54039999999999999], [0.72070000000000001], [0.62809999999999999], [0.65700000000000003], [0.65629999999999999], [0.51859999999999995], [0.66839999999999999], [0.78039999999999998], [0.57030000000000003], [0.52680000000000005], [0.51680000000000004], [0.5867], [0.60160000000000002], [0.59750000000000003], [0.50660000000000005], [0.50629999999999997], [0.65329999999999999], [0.64159999999999995], [0.62280000000000002], [0.58740000000000003], [0.51359999999999995], [0.54649999999999999], [0.53720000000000001], [0.58819999999999995], [0.59050000000000002], [0.53049999999999997], [0.54039999999999999], [0.50270000000000004], [0.56610000000000005], [0.50609999999999999], [0.55310000000000004], [0.54559999999999997], [0.65620000000000001], [0.55069999999999997], [0.52490000000000003], [0.69040000000000001], [0.51090000000000002], [0.60060000000000002], [0.59650000000000003], [0.52239999999999998], [0.54449999999999998], [0.58499999999999996], [0.54369999999999996], [0.59989999999999999], [0.5988], [0.52669999999999995], [0.54779999999999995], [0.50470000000000004], [0.52329999999999999]]

            xvalues = ["EPHA10", "DTX4", "SLC34A2", "LLGL1", "ERBB3", "PDLIM4", "TACSTD2", "TGFBR1", "PVRL4", "PLEKHA6", "PTPRE", "GRB7", "PROS1", "KCNQ3", "CRLF2", "LAD1", "FN1", "KLK10", "TMEM43", "MBOAT2", "PNPLA5", "PLEKHA4", "TTL", "DSC2", "NPTXR", "SNAP25", "TMCC3", "TMEM79", "AHNAK2", "B3GNT3", "TUBB3", "CDC42EP5", "CFTR", "OR4D10", "DHRS3", "KRT19", "TDRKH", "POU2F3", "RTKN", "ALS2CR4", "POLR3C", "FGF9", "CTSH", "PSG8", "ARMCX3", "RBM17", "MGAT3", "FLII", "SGMS2", "MGAT4B", "TMEM117", "DHDH", "MSN", "ANKLE2", "NRIP1", "IL1RAP", "RASGEF1B", "CACNG4", "DMBX1", "LGALS3", "CSDA", "MTMR11", "RUNX1", "SNX9", "SFTPB", "ST6GALNAC5", "PLEKHG4", "EREG", "SPOCK2", "GRM4", "CDK5RAP2", "ITGB8", "PSG1", "C5orf62", "LIPH", "RASGRF1", "SPINT1", "PC", "GPRC5B", "BEAN", "C2CD4A", "TGM1", "DDX52", "TIPARP", "C1orf187", "RUNX2", "SLC1A5", "C1QL1", "ADAMTS14", "GRM5", "ABCA12", "COMP", "GRHL3", "OR4D6", "NPC1", "MAP3K5", "PITX3", "C19orf33", "LEMD1", "C2CD4B", "MDFIC", "LCN6", "LSR", "RASGEF1A", "ANKRD56", "SYN1", "UBQLN4", "NMU", "RAMP1", "CTTN", "INPP4A", "LMO7", "MLLT4", "NRP2", "SEH1L", "C1orf107", "PNPLA6", "SP100", "CTSC", "DONSON", "MFGE8", "NEURL", "PARD3", "CDH3", "STRADB", "AJAP1", "LAMB3", "GTF2IRD1", "TMEM184A", "USP4", "DEPDC1B", "FYN", "CDK19", "LOC284578", "CORO2A", "STBD1", "CAV2", "HLA-G", "INHBB", "AFAP1", "STAM", "AKT3", "KIAA0922", "IQGAP3", "CST2", "RIN1", "FAM5B", "SIAH2", "C1orf170", "NAB2", "IFIT5", "ZNF430", "CCDC148", "IGF2BP2", "MAFF", "UBE2I", "ALDH3B2", "HNRNPF", "PLXNC1", "RAB34", "PHACTR3", "VTCN1", "ARRDC2", "CD58", "ZNRF2", "CATSPER1", "SUSD4", "MEX3D", "NUP188", "CSDAP1", "CSGALNACT2", "ZNF581", "EDEM1", "MDK", "RNF149", "GOLGA7B", "BCAS4", "LOX", "SMCR7", "CCL20", "IVL", "CSF2", "LYN", "ITPKC", "PRICKLE1", "LOC145837", "COL8A1", "VGLL1", "C2orf58", "SLC17A5", "KLK11", "LOC374443", "PIAS3", "ANXA2", "CCL13", "C1orf38", "MUC21", "ACTBL2", "SYT1", "CDC42BPG", "CDC42EP1", "MED15", "DUSP13", "SDK1", "IL1RL1", "LCN2", "WBSCR26", "PI4K2A", "PSG3", "ABCA4", "SULT2B1", "EPS8", "FARP1", "CBX3", "MPZL2", "ADCY7", "HPSE", "ALOX5", "MKI67IP", "SDR16C5", "KDM5B", "GPR153", "USP25", "CHST15", "SPATA12", "MUC20", "DPP4", "CDH11", "STK24", "TRY6", "VAT1", "IL1RN", "SHF", "MAPKAPK3", "OSGIN2", "S100B", "SP110", "TRIM47", "ZNRF3", "CCL17", "CAV1", "RTN4", "S100A2", "DSP", "C15orf62", "S100A11", "BNIPL", "TICAM1", "PELI1", "LTBP2", "SLC2A1", "RYR1", "SEC23A", "BCL2L1", "FGF20", "B3GNT6", "VARS", "C6orf174", "GALE", "KCNS3", "IFIT2", "PRSS3", "SH2D3A", "OR5A1", "MRC1", "CAD", "PAPPA", "HES2", "LAMC2", "IFNAR2", "IL13RA1", "ANXA2P1", "NPEPPS", "TNFRSF21", "AIM1L", "ZNF714", "ARL8B", "WDR55", "HNRNPUL2", "C13orf33", "RICH2", "CIZ1", "NUDT11", "RBMS2", "KLF16", "GLS", "ZFYVE19", "LOC285696", "LRG1", "FHL3", "CAST", "STAT1", "GALNT7", "CDYL", "TEC", "ANKRD43", "MICALCL", "ADSS", "ITGB4", "MAP4", "TGIF1", "FEZ2", "TAX1BP3", "ACOT7", "PAPLN", "SPTAN1", "SEPT8", "TM4SF4", "IGF1R", "PPRC1", "BCL9", "ARL13B", "FAM111B", "OCIAD2", "ZYX", "BTG3", "GGA3", "CEACAM6", "EPHA4", "BAG3", "ZNF395", "CALM2", "CHPT1", "ACTL6A", "ISOC1", "SLC20A1", "PARP4", "DCBLD2", "THOC5", "MMP16", "CRYGN", "DVL1", "TMPO", "GPR161", "PLXNB2", "B4GALNT3", "C3orf37", "PEA15", "CXCL16", "EHD2", "SIPA1L1", "RCC2", "REN", "CXCL5", "IRS2", "CTNNA1", "NRCAM", "AKIRIN2", "C11orf86", "CBFB", "RRP9", "AHR", "PKP4", "FANCE", "KIAA1045", "C20orf103", "CALCOCO1", "TNFSF18", "IQGAP1", "EEF1B2", "MARCO", "PTPRN", "MVP", "CLU", "MCM2", "COL11A1", "ANKS6", "DUSP11", "CNN3", "UBA2", "SH3BP2", "KRT13", "AHNAK", "DYNC1I2", "AXL", "C6orf105", "CAMSAP1", "KLK12", "TAGLN2", "LTBP3", "MYO1D", "ANXA3", "RNF183", "LOC149620", "CLEC16A", "NXN", "CELF4", "KCNN4", "KLF8", "ADCY8", "ENTPD2", "PON2", "IGSF9", "UNC5CL", "PPP1R1B", "TIMP1", "UPP1", "BHLHE41", "PPP1R13L", "ARSI", "DCDC2", "BAIAP3", "ARHGAP23", "PHLDB2", "PADI1", "ALDH3B1", "CLDN4", "TNNI1", "GATAD2A", "PAM", "ALOX15B", "NOTCH2", "ZNF431", "C1orf106", "CTNNAL1", "SFXN3", "CDKAL1", "ECE1", "KRT80", "EBI3", "SGMS1", "TUBB6", "C9orf169", "LDLR", "TNFRSF12A", "CDK7", "MAP3K1", "DSC3", "SLC22A4", "ANKH", "C1orf112", "MTAP", "ESPN", "ITPRIPL2", "RNF139", "CBR3", "EMP2", "RIPK2", "DKFZP586I1420", "VASN", "IL23A", "GPR115", "MEAF6", "RASD2", "RIMS2", "KCTD17", "STAT6", "CD276", "PDE9A", "ASPHD1", "SLC6A12", "EHBP1", "LYST", "GRAMD3", "MST1R", "DRAM1", "C6orf168", "ANXA2P2", "IGFL2", "C12orf76", "TMEM163", "IRF5", "LRRC8A", "FCHO1", "FIGNL1", "SFN", "DAPK2", "PAPSS1", "ANXA1", "CD109", "CTXN1", "CDCP1", "S100A6", "PHF13", "STRA6", "CLDN10", "SEC14L2", "DBC1", "PLS3", "PTPRU", "RARG", "RNF144A", "MICAL2", "SLC7A4", "HCN4", "LASP1", "INF2", "PLAC2", "RAD18", "LY6E", "SRGAP3", "PABPC4", "ZNF217", "RASA1", "TAF1D", "ZNF643", "CCNI2", "MED13", "TPD52L1", "GSN", "MFSD2B", "ZNF100", "CHD4", "PRPS2", "TJP2", "ZNF622", "RND3", "TOMM34", "CST5", "SOX4", "GLS2", "CREB5", "FLNA", "IL17RD", "ICAM1", "C1orf116", "ICAM5", "SPATS2L", "ARHGAP10", "ELP2", "LPAR5", "LOC400794", "PALM", "NGEF", "MAMLD1", "GABRA6", "MAP2", "SIGLEC6", "NOD1", "ACVR1", "RAD23B", "KLK6", "PTPRF", "C10orf47", "MACC1", "CDSN", "PPL", "TMPRSS4", "BID", "PERP", "KIAA1217", "SEPT9", "MXRA8", "CLRN3", "FAM111A", "DOCK9", "SLC27A6", "DUSP5", "QSOX1", "GJB4", "KANK2", "LY6G6C", "FLJ23867", "STAC", "DOK7", "CAMK2N1", "CXCL17", "ARAP1", "EPHB3", "SPTBN2", "SDC4", "PLA2G2E", "C11orf80", "EPPK1", "BASP1", "TSN", "CD55", "KIAA0284", "TMEM92", "SPOCD1", "CYP2S1", "SERTAD2", "TMEM98", "SC4MOL", "PLEKHN1", "ETNK2", "VWA5A", "ELFN2", "ELF3", "AMOT", "ETHE1", "MET", "PRSS22", "SLC35F2", "GJB3", "FSTL3", "HMGA1", "PDE5A", "CST6", "KCP", "IDS", "RSPO4", "ENDOD1", "SYT12", "BNC1", "LOC100126784", "SERPINA1", "ABTB2", "GABRB2", "ARNTL", "PLCD3", "FAM43A", "TBC1D2", "ATIC", "WNT10A", "TM7SF4", "TMPRSS6"]

            yvalues = ["BRAF"]

            df = pd.DataFrame(data=zvalues, index=xvalues, columns=yvalues)


            #=======================
            # MATRIX IS NOT SQUARE
            #=======================
            if(len(xvalues) != len(yvalues)):
                df2 = pd.concat([df, df.T]).fillna(0)
                df2 = df2.reindex(df2.columns)

            x = df2.as_matrix()

            y = nx.from_numpy_matrix(x)

            mapping=dict(zip(range(0,len(df2.columns)), df2.columns))

            h = nx.relabel_nodes(y, mapping)
            print h.edges()
        elif(test_cx_conversion):
            for i in range(2040000000, 2040023229):
                SearchViz.convert_cluster_to_cx_es_by_id(str(i))
        elif(test_conditions_tab):
            print_this = SearchConditionsTab.get_cosmic_grouped_by_tissues_then_diseases('OR2J3,AANAT,KRT80,MACC1,LOC139201,CCDC158,PLAC8L1,CLK1,GLTP,PITPNM2,TRAPPC8,EIF2S2,PNLIP,EHF,FOSB,MTMR4,USP46,CDH11,ENAH,CNOT7,STK39,CAPZA1,STIM2,DLL4,WEE1,MYO1D,TEAD3',99)
            print dumps(print_this)
            mystr = ''

        self.assertTrue(1 == 1)

    def test_baseline_scratch(self):
        test_baseline_scratch = False;
        result = True
        if(test_baseline_scratch):
            result = SearchPathwaysTab.test_cluster_search_helper('GO:0050877')

        self.assertTrue(result)

    def test_inferred_drugs_scratch(self):
        #SearchViz.experiment_1('SMAD9,SULT1C4,KIRREL,RUNX1T1,PCSK5,LDLRAD3,ADAMTS15,CACNA2D1,CYSLTR2,RGS7BP,EDIL3,PDE3A,PCDHGA12,C10orf128,ELK3,PRKG1,LPAR4,PCDHGB7,RP1L1,HTR1B,PDZD2', '2040000677,2040003042')#,2040014472') # ,2040019648,2040010321,2020030031,2040006259,2040001615,2020002079,2040022321')
        client = pymongo.MongoClient()
        db = client.cache

        heat_map_graph = db.heat_map_graph

        heat_map_found = heat_map_graph.find_one({'clusterId': '1234567'})

        data_tuples = {}

        if(heat_map_found is not None):
            data_tuples = heat_map_found['data_tuples']
        else:
            result = ElasticSearch.get_document_from_elastic_by_id('2020007907','none')
            data_tuples = SearchViz.filter_edges_to_tuples(result, 0.5, [], [], 20000)

            heat_map_graph.save(
                {
                    'clusterId': '123',
                    'data_tuples': data_tuples
                }
            )
        client.close()

        mainG = nx.Graph()
        mainG.add_weighted_edges_from(data_tuples['all_data_tuples'])


        print mainG.nodes()
        #print dumps(data_tuples)
        print nx.node_connected_component(mainG, 'FMN1_g')

        result = True

        self.assertTrue(result)

